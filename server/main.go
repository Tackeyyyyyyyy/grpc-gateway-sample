package server

import (
	proto "github.com/Tackeyyyyyyyy/grpc-gateway-sample/proto"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"io/ioutil"
	"log"
	"math/rand"
	"net"
	"net/http"
)

type helloService struct{}

type AutoGenerated struct {

}

func (hs *helloService) Proxy(ctx context.Context, request *proto.ProxyRequest) (*proto.ProxyResponse, error) {
	url := "https://zipcloud.ibsnet.co.jp/api/search?zipcode=1500031"
	resp, _ := http.Get(url)
	defer resp.Body.Close()
	byteArray, _ := ioutil.ReadAll(resp.Body)
	log.Println("proxy run")
	return &proto.ProxyResponse{Response: string(byteArray)}, nil
}

func (hs *helloService) CreateUser(ctx context.Context, request *proto.CreateUserRequest) (*proto.CreateUserResponse, error) {
	Id := GetRandString(10)
	return &proto.CreateUserResponse{EncryptedId: Id, Name: request.Name}, nil
}

func (hs *helloService) Echo(ctx context.Context, req *proto.HelloRequest) (*proto.HelloResponse, error) {
	return &proto.HelloResponse{
		Message: "hello, " + req.UserName,
	}, nil
}

func Start(port string) {
	listen, err := net.Listen("tcp", ":"+port)
	if err != nil {
		log.Fatalln(err)
	}
	log.Printf("server listen: " + listen.Addr().String())
	server := grpc.NewServer()
	proto.RegisterSayHelloServer(server, &helloService{})

	if err := server.Serve(listen); err != nil {
		log.Fatalln(err)
	}
	return
}

func GetRandString(n int) string {
	var letterRunes = []rune("1234567890abcdefghijklmnopqrstuvw")

	b := make([]rune, n)
	for i := range b {
		b[i] = letterRunes[rand.Intn(len(letterRunes))]
	}
	return string(b)
}